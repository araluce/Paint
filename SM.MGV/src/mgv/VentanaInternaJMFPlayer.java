/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mgv;

import java.awt.Component;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.media.Buffer;
import javax.media.Manager;
import javax.media.MediaLocator;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;

/**
 * Reproduce vídeo y audio
 * @author araluce
 */
public class VentanaInternaJMFPlayer extends javax.swing.JInternalFrame {
    //Variable que contendrá el medio
    private Player player = null;
    
    private FrameGrabbingControl fgc;
    
    /**
     * Constructor de la clase VentanaInternaJMFPlayer
     */
    public VentanaInternaJMFPlayer(File f) {
        initComponents();
        String sfichero = "file:" + f.getAbsolutePath();
        MediaLocator ml = new MediaLocator(sfichero);
        try {
            player = Manager.createRealizedPlayer(ml);
            Component vc = player.getVisualComponent();
            if(vc!=null)add(vc, java.awt.BorderLayout.CENTER);
            Component cpc = player.getControlPanelComponent();
            if(cpc!=null)add(cpc, java.awt.BorderLayout.SOUTH);
            player.start();
            fgc = (FrameGrabbingControl) player.getControl(
                    "javax.media.control.FrameGrabbingControl");
            this.pack();
        }catch(Exception e) {
            System.err.println("VentanaInternaJMFPlayer: "+e);
            player = null;
        }
    }
    /**
     * Retorna una instancia de la clase VentanaInternaJMFPlayer
     * @param f Fichero que contiene el vídeo/audio
     * @return 
     */
    public static VentanaInternaJMFPlayer getInstance(File f){
        VentanaInternaJMFPlayer v = new VentanaInternaJMFPlayer(f);
        if(v.player!=null) return v;
        else return null;
    }
    
    /**
     * Manejador que controla la reproducción del medio
     */
    public void play() {
        if (player != null) {
            try {
                player.start();
            } catch (Exception e) {
                System.err.println("VentanaInternaJMFPlayer: "+e);
            }
        }
    }
    
    /**
     * Devuelve un frame del vídeo que se está reproduciendo
     * @return  Lienzo2dImagen (el frame en cuestión)
     */
    public BufferedImage getFrame(){
        Image img;
        Buffer buf = fgc.grabFrame();
        VideoFormat bufFormat = (VideoFormat) buf.getFormat();
        BufferToImage bti = new BufferToImage(bufFormat);
        img = bti.createImage(buf);
        if (img == null) {
            return null;
        }
        return (BufferedImage) img;

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento que controla el cierre de la ventana
     * @param evt 
     */
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        player.close();
    }//GEN-LAST:event_formInternalFrameClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
